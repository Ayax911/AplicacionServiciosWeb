@inject Servicios.ServiciosReponsable serviciosReponsable
@page "/responsables"

<h3 class="">Gestión de Responsables</h3>
<p>Administra los responsables de tus proyectos de manera eficiente</p>
@if (MostrarDetalle)
{
    <div class="card">
        <div class="detalle-header">
            <div class="d-flex align-items-center gap-3">
                <div class="avatar-circle-large">
                    @ObtenerIniciales(responsableSeleccionado.NombreResponsable)
                </div>
                <div>
                    <h5 class="mb-0 text-white fw-bold">@responsableSeleccionado.NombreResponsable</h5>
                    <p class="mb-0 text-white opacity-75">@responsableSeleccionado.TipoResponsable</p>
                </div>
            </div>
            <button class="btn btn-close-white" @onclick="() => MostrarDetalle = false">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>
        <div class="card-body">
            <div class="d-flex justify-content-center text-center gap-5 m-5">
                <div>
                    <label for="iDResponsable" class="d-block mb-2">ID Usuario</label>
                    <strong id="iDResponsable">@responsableSeleccionado.IDUsuario</strong>
                </div>

                <div>
                    <label for="TipoResponsable" class="d-block mb-2">Tipo de Responsable</label>
                    <strong id="TipoResponsable">@responsableSeleccionado.TipoResponsable</strong>
                </div>
            </div>
            <div class="mb-4">
                <label class="detalle-label mb-3">Información del Rol</label>
                <div class="info-card">
                    <h6 class="fw-semibold mb-2">
                        <i class="bi bi-briefcase-fill"></i>
                        @responsableSeleccionado.TipoResponsable
                    </h6>
                    <p class="mb-0">
                        @responsableSeleccionado.DescripcionTipo
                    </p>
                </div>
            </div>
            <div class="border-bottom mb-3"></div>
            <div class="d-flex justify-content-center gap-5">
                <button @onclick="() => EditarResponsable(responsableSeleccionado)"  class="btn btn-primary" style="width:500px"><i class="bi bi-pencil"></i> Editar</button>
                <button @onclick="() => EliminarReponsable(responsableSeleccionado)" class="btn btn-danger" style="width:200px"><i class="bi bi-trash"></i> Eliminar</button>
            </div>
        </div>
    </div>
}
else if(MostrarFormulario)
{
    <div class="modal-overlay" @onclick="() => MostrarFormulario = false">
        <div class="form-card" @onclick:stopPropagation="true">
            <!-- Header -->
            <div class="form-header">
                <div>
                    <h4 class="mb-1 fw-bold">
                        @(responsableEditando.NombreResponsable != null ? "Editar Responsable" : "Nuevo Responsable")
                    </h4>
                    <p class="mb-0 text-muted">Complete la información del responsable</p>
                </div>
                <button class="btn-close-icon" @onclick="() => MostrarFormulario = false">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>

            <!-- Body -->
            <div class="form-body">
                <div class="mb-4">
                    <label class="form-label-custom">
                        Nombre Completo <span class="text-danger">*</span>
                    </label>
                    <input type="text"
                           class="form-control-custom"
                           placeholder="Ingrese el nombre completo"
                           @bind="responsableEditando.NombreResponsable" />
                </div>

                <div class="mb-4">
                    <label class="form-label-custom">
                        Tipo de Responsable <span class="text-danger">*</span>
                    </label>
                    <select class="form-control-custom" @bind="responsableEditando.TipoResponsable">
						<option value="">Seleccione un tipo</option>
                        @foreach (var tipo in tipoResponsables)
                        {

                            <option value="@tipo.Titulo">@tipo.Titulo</option>
                        }
                    </select>
                    <p>Seleccionado: @responsableEditando.TipoResponsable</p>
                </div>

                <div class="mb-4">
                    <label class="form-label-custom">
                        ID Usuario <span class="text-danger">*</span>
                    </label>
                    <input type="number"
                           class="form-control-custom"
                           placeholder="Ingrese el ID del usuario"
                           @bind="responsableEditando.IDUsuario" />
                </div>
            </div>

            <!-- Footer -->
            <div class="form-footer">
                <button class="btn btn-primary btn-lg flex-fill" @onclick="()=>GuardarResponsable()">
                    <i class="bi bi-check-lg me-2"></i>
                    Guardar
                </button>
                <button class="btn btn-secondary btn-lg" @onclick="() => MostrarFormulario = false">
                    <i class="bi bi-x-lg me-2"></i>
                    Cancelar
                </button>
            </div>
        </div>
    </div>
}
else
{
    <div class="mb-3">
        <div class="card">
            <div class="card-body">
                <div class="search-container">
                    <input type="text"
                           class="search-input"
                           placeholder="Buscar responsables..." />
                    <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="11" cy="11" r="8"></circle>
                        <path d="m21 21-4.35-4.35"></path>
                    </svg>
                </div>
                <div class="d-flex align-items-center mt-2 gap-3">
                    <button class="pill-filtros @GetPillClass("todos")"
                            @onclick="() => reiniciarFiltro()">
                        Todos (@responsables.Count)
                    </button>
                    @foreach (var responsableT in tiposResponsables)
                    {
                        <button class="pill-filtros @GetPillClass(responsableT)"
                                @onclick="() => filterTipo = responsableT">
                            @responsableT (@GetCount(responsableT))
                        </button>
                    }
                    <button class="btn btn-primary ms-auto" @onclick="() => NuevoResponsable()">
                        <i class="bi bi-plus"></i> Agregar Responsable
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body p-0">
            <table class="table table-custom table-hover">
                <thead class="table-header-custom">
                    <tr>
                        <th>Nombre</th>
                        <th>Tipo de Responsable</th>
                        <th>UsuarioID</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var responsable in responsables.Where(r => filterTipo == "todos" || r.TipoResponsable == filterTipo))
                    {
                        <tr>
                            <td>
                                <div class="d-flex align-items-center gap-3">
                                    <div class="avatar-circle">
                                        @ObtenerIniciales(responsable.NombreResponsable)
                                    </div>
                                    @responsable.NombreResponsable
                                </div>
                            </td>
                            <td>@responsable.TipoResponsable</td>
                            <td>@responsable.IDUsuario</td>
                            <td>
                                <div class="d-flex gap-2">
                                    <button class="btn-action btn-action-view" @onclick="()=> detallesSeleccionado(responsable)" title="Ver detalles">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    <button class="btn-action btn-action-edit" title="Editar" @onclick="()=> EditarResponsable(responsable)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn-action btn-action-delete" title="Eliminar" @onclick="()=> EliminarReponsable(responsable)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div >
        @if (!string.IsNullOrEmpty(Mensaje))
        {
            <div class="alert alert-info mt-3" role="alert">
                @Mensaje
            </div>
		}
    </div>
}

@code {
    private List<Models.DTOResponsableT> responsables = new();
    private List<string> tiposResponsables = new();
    private Models.DTOResponsableT responsableSeleccionado = new();
    private bool MostrarDetalle = false;
    private bool MostrarFormulario = false;
    private Models.DTOResponsableT responsableEditando = null;
    private int iD_USUARIO;
    private string Mensaje = string.Empty;
	private List<Models.TipoResponsable> tipoResponsables = new();

    protected override async Task OnInitializedAsync()
    {
        await GetResponsables();
        obtenertipo();
		await OntenerTipos();
    }
    private async Task OntenerTipos()
    {
		tipoResponsables = await serviciosReponsable.obtenerTiposReponsables();
	}

    private async Task GetResponsables()
    {
        try
        {
            responsables = await serviciosReponsable.ObtenerResponsablesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener responsables: {ex.Message}");
        }
    }
    private string filterTipo = "todos";

    private string GetPillClass(string tipoId)
    {
        return filterTipo == tipoId ? "pill-active" : "pill-default";
    }
    private string reiniciarFiltro()
    {
        filterTipo = "todos";
        return filterTipo;
    }
    private void detallesSeleccionado(Models.DTOResponsableT responsable)
    {
        responsableSeleccionado = responsable;
        MostrarDetalle = true;
    }
    private int GetCount(string tipoR)
    {
        return responsables.Count(r => r.TipoResponsable == tipoR);
    }
    private void obtenertipo()
    {
        foreach (var responsable in responsables)
        {
            if (!tiposResponsables.Contains(responsable.TipoResponsable))
            {
                tiposResponsables.Add(responsable.TipoResponsable);
            }
        }
    }
    private string ObtenerIniciales(string nombre)
    {
        if (string.IsNullOrWhiteSpace(nombre))
            return "";
        var partes = nombre.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (partes.Length == 1)
            return partes[0].Substring(0, 1).ToUpper();
        return string.Concat(partes[0][0], partes[1][0]).ToUpper();
    }
    private string ObtenerDescripcionTipo(string tipo)
    {
        return responsables.FirstOrDefault(r => r.TipoResponsable == tipo)?.DescripcionTipo ?? "";
    }
    private async Task GuardarResponsable()
    {
        var resp = await serviciosReponsable.CrearResponsable(responsableEditando.NombreResponsable, responsableEditando.TipoResponsable, responsableEditando.IDUsuario);
        if (resp)
        {
            await GetResponsables();
            obtenertipo();
        }
        else
        {
            // Manejar error al crear responsable
        }
        MostrarFormulario = false;
    }
    private async Task NuevoResponsable()
    {
        responsableEditando = new Models.DTOResponsableT();
        MostrarFormulario = true;
    }
    private void EditarResponsable(Models.DTOResponsableT responsable)
    {
        responsableEditando = responsable;
        MostrarDetalle = false;
        MostrarFormulario = true;
    }
    private async Task EliminarReponsable(Models.DTOResponsableT responsable)
    {

        var Elimino = await serviciosReponsable.EliminarResponsable(responsable.IDUsuario);
        if (!Elimino)
        {
            if(MostrarDetalle){
                MostrarDetalle = false;
			}
            await GetResponsables();
            obtenertipo();
            
        }
        else
        {
            // Manejar error al eliminar responsable
        }
    }
  }


