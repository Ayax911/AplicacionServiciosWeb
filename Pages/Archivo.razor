@page "/archivo"
@inject Servicios.ServiciosArchivo serviciosArchivo
@inject Servicios.ServiciosUsuario UsuarioService
@inject IJSRuntime JSRuntime

<h3 class="mb-2">Gestión de Archivos</h3>
<p>Administra los archivos del sistema</p>

@* ========================== DETALLE ========================== *@
@if (MostrarDetalle)
{
    <div class="card">
        <div class="detalle-header d-flex align-items-center justify-content-between">
            <div class="d-flex align-items-center gap-3">
                <div class="avatar-circle-large">
                    @ObtenerIniciales(archivoSeleccionado.Nombre)
                </div>
                <div>
                    <h5 class="mb-0 text-white fw-bold">@archivoSeleccionado.Nombre</h5>
                    <p class="mb-0 text-white opacity-75">@archivoSeleccionado.Tipo</p>
                </div>
            </div>
            <button class="btn btn-close-white" @onclick="() => MostrarDetalle = false">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>

        <div class="card-body">
            <div class="d-flex justify-content-center text-center gap-5 m-5">
                <div>
                    <label class="d-block mb-2">Usuario</label>
                    <strong>@archivoSeleccionado.EmailUsuario</strong>
                </div>
                <div>
                    <label class="d-block mb-2">Tipo</label>
                    <strong>@archivoSeleccionado.Tipo</strong>
                </div>
                <div>
                    <label class="d-block mb-2">Fecha</label>
                    <strong>@archivoSeleccionado.Fecha?.ToString("dd/MM/yyyy")</strong>
                </div>
            </div>

            <div class="mb-4">
                <label class="detalle-label mb-3">Ruta del Archivo</label>
                <div class="info-card">
                    <p class="mb-0">@archivoSeleccionado.Ruta</p>
                </div>
            </div>

            <div class="border-bottom mb-3"></div>

            <div class="d-flex justify-content-center gap-5">
                <button class="btn btn-primary" style="width: 300px" @onclick="() => EditarArchivo(archivoSeleccionado)">
                    <i class="bi bi-pencil"></i> Editar
                </button>
                <button class="btn btn-danger" style="width: 200px" @onclick="() => EliminarArchivo(archivoSeleccionado)">
                    <i class="bi bi-trash"></i> Eliminar
                </button>
            </div>
        </div>
    </div>
}

@* ========================== FORMULARIO ========================== *@
else if (MostrarFormulario)
{
    <div class="modal-overlay" @onclick="() => MostrarFormulario = false">
        <div class="form-card" @onclick:stopPropagation="true">
            <div class="form-header d-flex justify-content-between align-items-center">
                <div>
                    <h4 class="mb-1 fw-bold">@((archivoEditando?.Id > 0) ? "Editar Archivo" : "Nuevo Archivo")</h4>
                    <p class="mb-0 text-muted">Complete la información del archivo</p>
                </div>
                <button class="btn-close-icon" @onclick="() => MostrarFormulario = false">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>

            <div class="form-body">
                <div class="mb-4">
                    <label class="form-label-custom">Nombre <span class="text-danger">*</span></label>
                    <input type="text" class="form-control-custom" placeholder="Ingrese el nombre del archivo" @bind="archivoEditando.Nombre" />
                </div>

                <div class="mb-4">
                    <label class="form-label-custom">Ruta <span class="text-danger">*</span></label>
                    <input type="text" class="form-control-custom" placeholder="/uploads/documentos/archivo.pdf" @bind="archivoEditando.Ruta" />
                </div>

                <div class="mb-4">
                    <label class="form-label-custom">Usuario <span class="text-danger">*</span></label>
                    <select class="form-control-custom" @bind="archivoEditando.IdUsuario">
                        <option value="0">Seleccione un usuario</option>
                        @foreach (var usuario in usuarios)
                        {
                            <option value="@usuario.Id">@usuario.Email</option>
                        }
                    </select>
                </div>

                <div class="row mb-4">
                    <div class="col-md-6">
                        <label class="form-label-custom">Tipo</label>
                        <input type="text" class="form-control-custom" placeholder="application/pdf" @bind="archivoEditando.Tipo" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label-custom">Fecha</label>
                        <input type="date" class="form-control-custom" @bind="archivoEditando.Fecha" />
                    </div>
                </div>
            </div>

            <div class="form-footer d-flex justify-content-end gap-3">
                <button class="btn btn-primary btn-lg" @onclick="GuardarArchivo">
                    <i class="bi bi-check-lg me-2"></i> Guardar
                </button>
                <button class="btn btn-secondary btn-lg" @onclick="() => MostrarFormulario = false">
                    <i class="bi bi-x-lg me-2"></i> Cancelar
                </button>
            </div>
        </div>
    </div>
}

@* ========================== LISTADO ========================== *@
else
{
    <div class="mb-3">
        <div class="card">
            <div class="card-body">
                <div class="search-container">
                    <input type="text" class="search-input" placeholder="Buscar archivos..." @bind="busqueda" @bind:event="oninput" />
                    <i class="bi bi-search search-icon"></i>
                </div>

                <div class="d-flex align-items-center mt-2 gap-3">
                    <button class="btn btn-primary ms-auto" @onclick="NuevoArchivo">
                        <i class="bi bi-plus"></i> Agregar Archivo
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body p-0">
            <table class="table table-custom table-hover">
                <thead class="table-header-custom">
                    <tr>
                        <th>Nombre</th>
                        <th>Usuario</th>
                        <th>Tipo</th>
                        <th>Fecha</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var archivo in ArchivosFiltrados())
                    {
                        <tr>
                            <td>@archivo.Nombre</td>
                            <td>@archivo.EmailUsuario</td>
                            <td>@archivo.Tipo</td>
                            <td>@archivo.Fecha?.ToString("dd/MM/yyyy")</td>
                            <td>
                                <div class="d-flex gap-2">
                                    <button class="btn-action btn-action-view" title="Ver detalles" @onclick="() => VerDetalle(archivo)">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    <button class="btn-action btn-action-edit" title="Editar" @onclick="() => EditarArchivo(archivo)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn-action btn-action-delete" title="Eliminar" @onclick="() => EliminarArchivo(archivo)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Mensaje))
    {
        <div class="alert alert-info mt-3" role="alert">@Mensaje</div>
    }
}

@code {
    private List<Models.DTOArchivo> archivos = new();
    private List<Models.Usuario> usuarios = new();
    private Models.DTOArchivo archivoSeleccionado = new();
    private Models.DTOArchivo? archivoEditando;
    private bool MostrarDetalle = false;
    private bool MostrarFormulario = false;
    private string busqueda = string.Empty;
    private string Mensaje = string.Empty;

    protected override async Task OnInitializedAsync() => await CargarDatos();

    private async Task CargarDatos()
    {
        try
        {
            archivos = await serviciosArchivo.ObtenerArchivosAsync();
            usuarios = (await UsuarioService.GetUsuarios()).ToList();
        }
        catch (Exception ex)
        {
            Mensaje = $"Error al cargar los datos: {ex.Message}";
        }
    }

    private List<Models.DTOArchivo> ArchivosFiltrados()
    {
        if (string.IsNullOrWhiteSpace(busqueda))
            return archivos;

        return archivos.Where(a =>
            a.Nombre.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ||
            (a.EmailUsuario?.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (a.Tipo?.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ?? false)
        ).ToList();
    }

    private void VerDetalle(Models.DTOArchivo archivo)
    {
        archivoSeleccionado = archivo;
        MostrarDetalle = true;
    }

    private void NuevoArchivo()
    {
        archivoEditando = new Models.DTOArchivo
        {
            Fecha = DateTime.Now
        };
        MostrarFormulario = true;
    }

    private void EditarArchivo(Models.DTOArchivo archivo)
    {
        archivoEditando = archivo;
        MostrarDetalle = false;
        MostrarFormulario = true;
    }

    private async Task GuardarArchivo()
    {
        try
        {
            int id = archivoEditando?.Id ?? 0;
            int idUsuario = archivoEditando?.IdUsuario ?? 0;
            string ruta = archivoEditando?.Ruta ?? string.Empty;
            string nombre = archivoEditando?.Nombre ?? string.Empty;
            string tipo = archivoEditando?.Tipo ?? string.Empty;
            DateTime? fecha = archivoEditando?.Fecha;

            bool resultado = await serviciosArchivo.GuardarArchivoAsync(id, idUsuario, ruta, nombre, tipo, fecha);
            if (resultado)
            {
                Mensaje = "Archivo guardado correctamente.";
                MostrarFormulario = false;
                await CargarDatos();
            }
            else
            {
                Mensaje = "Error al guardar el archivo.";
            }
        }
        catch (Exception ex)
        {
            Mensaje = $"Error: {ex.Message}";
        }
    }

    private async Task EliminarArchivo(Models.DTOArchivo archivo)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"¿Está seguro de eliminar '{archivo.Nombre}'?"))
        {
            try
            {
                bool resultado = await serviciosArchivo.EliminarArchivoAsync(archivo.Id);
                Mensaje = resultado ? "Archivo eliminado correctamente." : "Error al eliminar el archivo.";
                if (resultado)
                {
                    MostrarDetalle = false;
                    await CargarDatos();
                }
            }
            catch (Exception ex)
            {
                Mensaje = $"Error: {ex.Message}";
            }
        }
    }

    private string ObtenerIniciales(string texto)
    {
        if (string.IsNullOrWhiteSpace(texto))
            return "??";

        var partes = texto.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return partes.Length switch
        {
            1 => partes[0].Substring(0, Math.Min(2, partes[0].Length)).ToUpper(),
            _ => string.Concat(partes[0][0], partes[1][0]).ToUpper()
        };
    }
}