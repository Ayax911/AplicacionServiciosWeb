@page "/presupuesto"
@inject Servicios.ServiciosPresupuesto serviciosPresupuesto
@inject Servicios.ServiciosProyecto ProyectoService
@inject IJSRuntime JSRuntime

<h3 class="mb-2">Gestión de Presupuestos</h3>
<p>Administra los presupuestos de los proyectos</p>

@* ========================== DETALLE ========================== *@
@if (MostrarDetalle)
{
    <div class="card">
        <div class="detalle-header d-flex align-items-center justify-content-between">
            <div class="d-flex align-items-center gap-3">
                <div class="avatar-circle-large">
                    @ObtenerIniciales(presupuestoSeleccionado.TituloProyecto)
                </div>
                <div>
                    <h5 class="mb-0 text-white fw-bold">@presupuestoSeleccionado.TituloProyecto</h5>
                    <p class="mb-0 text-white opacity-75">@presupuestoSeleccionado.CodigoProyecto</p>
                </div>
            </div>
            <button class="btn btn-close-white" @onclick="() => MostrarDetalle = false">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>

        <div class="card-body">
            <div class="d-flex justify-content-center text-center gap-5 m-5">
                <div>
                    <label class="d-block mb-2">Monto Solicitado</label>
                    <strong>$@presupuestoSeleccionado.MontoSolicitado.ToString("N2")</strong>
                </div>
                <div>
                    <label class="d-block mb-2">Monto Aprobado</label>
                    <strong>$@(presupuestoSeleccionado.MontoAprobado?.ToString("N2") ?? "N/A")</strong>
                </div>
                <div>
                    <label class="d-block mb-2">Estado</label>
                    <strong>
                        <span class="badge @ObtenerClaseEstado(presupuestoSeleccionado.Estado)">
                            @presupuestoSeleccionado.Estado
                        </span>
                    </strong>
                </div>
                <div>
                    <label class="d-block mb-2">Período</label>
                    <strong>@presupuestoSeleccionado.PeriodoAnio</strong>
                </div>
            </div>

            <div class="mb-4">
                <label class="detalle-label mb-3">Observaciones</label>
                <div class="info-card">
                    <p class="mb-0">@(presupuestoSeleccionado.Observaciones ?? "Sin observaciones")</p>
                </div>
            </div>

            @if (presupuestoSeleccionado.FechaSolicitud != null)
            {
                <div class="mb-3">
                    <label class="d-block mb-2 text-muted">Fecha Solicitud</label>
                    <strong>@presupuestoSeleccionado.FechaSolicitud?.ToString("dd/MM/yyyy")</strong>
                </div>
            }

            @if (presupuestoSeleccionado.FechaAprobacion != null)
            {
                <div class="mb-3">
                    <label class="d-block mb-2 text-muted">Fecha Aprobación</label>
                    <strong>@presupuestoSeleccionado.FechaAprobacion?.ToString("dd/MM/yyyy")</strong>
                </div>
            }

            <div class="border-bottom mb-3"></div>

            <div class="d-flex justify-content-center gap-5">
                <button class="btn btn-primary" style="width: 300px" @onclick="() => EditarPresupuesto(presupuestoSeleccionado)">
                    <i class="bi bi-pencil"></i> Editar
                </button>
                <button class="btn btn-danger" style="width: 200px" @onclick="() => EliminarPresupuesto(presupuestoSeleccionado)">
                    <i class="bi bi-trash"></i> Eliminar
                </button>
            </div>
        </div>
    </div>
}

@* ========================== FORMULARIO ========================== *@
else if (MostrarFormulario)
{
    <div class="modal-overlay" @onclick="() => MostrarFormulario = false">
        <div class="form-card" @onclick:stopPropagation="true">
            <div class="form-header d-flex justify-content-between align-items-center">
                <div>
                    <h4 class="mb-1 fw-bold">@((presupuestoEditando?.Id > 0) ? "Editar Presupuesto" : "Nuevo Presupuesto")</h4>
                    <p class="mb-0 text-muted">Complete la información del presupuesto</p>
                </div>
                <button class="btn-close-icon" @onclick="() => MostrarFormulario = false">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>

            <div class="form-body">
                <div class="mb-4">
                    <label class="form-label-custom">Proyecto <span class="text-danger">*</span></label>
                    <select class="form-control-custom"
                            value="@presupuestoEditando.IdProyecto"
                            @onchange="OnProyectoChange">
                        <option value="0">Seleccione un proyecto</option>
                        @foreach (var proyecto in proyectos)
                        {
                            <option value="@proyecto.Id">@proyecto.Titulo</option>
                        }
                    </select>
                </div>



                <div class="row mb-4">
                    <div class="col-md-6">
                        <label class="form-label-custom">Monto Solicitado <span class="text-danger">*</span></label>
                        <input type="number" step="0.01" class="form-control-custom" placeholder="500000.00" @bind="presupuestoEditando.MontoSolicitado" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label-custom">Monto Aprobado</label>
                        <input type="number" step="0.01" class="form-control-custom" placeholder="450000.00" @bind="presupuestoEditando.MontoAprobado" />
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-md-6">
                        <label class="form-label-custom">Estado <span class="text-danger">*</span></label>
                        <select class="form-control-custom" @bind="presupuestoEditando.Estado">
                            <option value="Pendiente">Pendiente</option>
                            <option value="Aprobado">Aprobado</option>
                            <option value="Rechazado">Rechazado</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label-custom">Período (Año)</label>
                        <input type="number" class="form-control-custom" placeholder="2025" @bind="presupuestoEditando.PeriodoAnio" />
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-md-6">
                        <label class="form-label-custom">Fecha Solicitud</label>
                        <input type="date" class="form-control-custom" @bind="presupuestoEditando.FechaSolicitud" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label-custom">Fecha Aprobación</label>
                        <input type="date" class="form-control-custom" @bind="presupuestoEditando.FechaAprobacion" />
                    </div>
                </div>

                <div class="mb-4">
                    <label class="form-label-custom">Observaciones</label>
                    <textarea class="form-control-custom" rows="3" placeholder="Ingrese las observaciones" @bind="presupuestoEditando.Observaciones"></textarea>
                </div>
            </div>

            <div class="form-footer d-flex justify-content-end gap-3">
                <button class="btn btn-primary btn-lg" @onclick="GuardarPresupuesto">
                    <i class="bi bi-check-lg me-2"></i> Guardar
                </button>
                <button class="btn btn-secondary btn-lg" @onclick="() => MostrarFormulario = false">
                    <i class="bi bi-x-lg me-2"></i> Cancelar
                </button>
            </div>
        </div>
    </div>
}

@* ========================== LISTADO ========================== *@
else
{
    <div class="mb-3">
        <div class="card">
            <div class="card-body">
                <div class="search-container">
                    <input type="text" class="search-input" placeholder="Buscar presupuestos..." @bind="busqueda" @bind:event="oninput" />
                    <i class="bi bi-search search-icon"></i>
                </div>

                <div class="d-flex align-items-center mt-2 gap-3">
                    <button class="btn btn-primary ms-auto" @onclick="NuevoPresupuesto">
                        <i class="bi bi-plus"></i> Agregar Presupuesto
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body p-0">
            <table class="table table-custom table-hover">
                <thead class="table-header-custom">
                    <tr>
                        <th>Proyecto</th>
                        <th>Monto Solicitado</th>
                        <th>Monto Aprobado</th>
                        <th>Estado</th>
                        <th>Período</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pres in PresupuestosFiltrados())
                    {
                        <tr>
                            <td>@pres.TituloProyecto</td>
                            <td>$@pres.MontoSolicitado.ToString("N2")</td>
                            <td>$@(pres.MontoAprobado?.ToString("N2") ?? "N/A")</td>
                            <td>
                                <span class="badge @ObtenerClaseEstado(pres.Estado)">
                                    @pres.Estado
                                </span>
                            </td>
                            <td>@pres.PeriodoAnio</td>
                            <td>
                                <div class="d-flex gap-2">
                                    <button class="btn-action btn-action-view" title="Ver detalles" @onclick="() => VerDetalle(pres)">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    <button class="btn-action btn-action-edit" title="Editar" @onclick="() => EditarPresupuesto(pres)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn-action btn-action-delete" title="Eliminar" @onclick="() => EliminarPresupuesto(pres)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Mensaje))
    {
        <div class="alert alert-info mt-3" role="alert">@Mensaje</div>
    }
}

@code {
    private List<Models.DTOPresupuestos> presupuestos = new();
    private List<Models.DTOProyecto> proyectos = new();
    private Models.DTOPresupuestos presupuestoSeleccionado = new();
    private Models.DTOPresupuestos? presupuestoEditando;
    private bool MostrarDetalle = false;
    private bool MostrarFormulario = false;
    private string busqueda = string.Empty;
    private string Mensaje = string.Empty;

    protected override async Task OnInitializedAsync() => await CargarDatos();

    private async Task CargarDatos()
    {
        try
        {
            presupuestos = await serviciosPresupuesto.ObtenerPresupuestosAsync();
            proyectos = (await ProyectoService.ObtenerProyectosAsync()).ToList();
        }
        catch (Exception ex)
        {
            Mensaje = $"Error al cargar los datos: {ex.Message}";
        }
    }

    private List<Models.DTOPresupuestos> PresupuestosFiltrados()
    {
        if (string.IsNullOrWhiteSpace(busqueda))
            return presupuestos;

        return presupuestos.Where(p =>
            (p.TituloProyecto?.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (p.CodigoProyecto?.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (p.Estado?.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ?? false)
        ).ToList();
    }

    private void VerDetalle(Models.DTOPresupuestos pres)
    {
        presupuestoSeleccionado = pres;
        MostrarDetalle = true;
    }

    private void NuevoPresupuesto()
    {
        presupuestoEditando = new Models.DTOPresupuestos
        {
            Estado = "Pendiente",
            FechaSolicitud = DateTime.Now,
            PeriodoAnio = DateTime.Now.Year
        };
        MostrarFormulario = true;
    }

    private void EditarPresupuesto(Models.DTOPresupuestos pres)
    {
        presupuestoEditando = pres;
        MostrarDetalle = false;
        MostrarFormulario = true;
    }

    private async Task GuardarPresupuesto()
    {
        try
        {
            if (presupuestoEditando.IdProyecto == 0)
            {
                Mensaje = "Debe seleccionar un proyecto válido antes de guardar.";
                return;
            }

            int id = presupuestoEditando?.Id ?? 0;
            int idProyecto = presupuestoEditando?.IdProyecto ?? 0;
            decimal montoSolicitado = presupuestoEditando?.MontoSolicitado ?? 0;
            string estado = presupuestoEditando?.Estado?? "Pendiente";
            decimal? montoAprobado = presupuestoEditando?.MontoAprobado;
            int? periodoAnio = presupuestoEditando?.PeriodoAnio;
            DateTime? fechaSolicitud = presupuestoEditando?.FechaSolicitud;
            DateTime? fechaAprobacion = presupuestoEditando?.FechaAprobacion;
            string observaciones = presupuestoEditando?.Observaciones ?? string.Empty;

            bool resultado = await serviciosPresupuesto.GuardarPresupuestoAsync(
                id, idProyecto, montoSolicitado, estado, montoAprobado,
                periodoAnio, fechaSolicitud, fechaAprobacion, observaciones);



            if (resultado)
            {
                Mensaje = "Presupuesto guardado correctamente.";
                MostrarFormulario = false;
                await CargarDatos();
                StateHasChanged();   // forzar refresco visual
            }
            else
            {
                Mensaje = "Error al guardar el presupuesto.";
            }

        }
        catch (Exception ex)
        {
            Mensaje = $"Error: {ex.Message}";
        }
    }

    private async Task EliminarPresupuesto(Models.DTOPresupuestos pres)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"¿Está seguro de eliminar el presupuesto de '{pres.TituloProyecto}'?"))
        {
            try
            {
                bool resultado = await serviciosPresupuesto.EliminarPresupuestoAsync(pres.Id);
                Mensaje = resultado ? "Presupuesto eliminado correctamente." : "Error al eliminar el presupuesto.";
                if (resultado)
                {
                    MostrarDetalle = false;
                    await CargarDatos();
                }
            }
            catch (Exception ex)
            {
                Mensaje = $"Error: {ex.Message}";
            }
        }
    }

    private void OnProyectoChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int idSeleccionado))
        {
            presupuestoEditando.IdProyecto = idSeleccionado;
            Console.WriteLine($"Proyecto seleccionado: {idSeleccionado}");
        }
        else
        {
            presupuestoEditando.IdProyecto = 0;
            Console.WriteLine(" Proyecto no válido seleccionado.");
        }
    }


    private string ObtenerIniciales(string texto)
    {
        if (string.IsNullOrWhiteSpace(texto))
            return "??";

        var partes = texto.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return partes.Length switch
        {
            1 => partes[0].Substring(0, Math.Min(2, partes[0].Length)).ToUpper(),
            _ => string.Concat(partes[0][0], partes[1][0]).ToUpper()
        };
    }

    private string ObtenerClaseEstado(string estado)
    {
        return estado switch
        {
            "Aprobado" => "bg-success",
            "Rechazado" => "bg-danger",
            "Pendiente" => "bg-warning text-dark",
            _ => "bg-secondary"
        };
    }
}