@page "/tipoproyecto"
@using BlazorApp1.Models
@using BlazorApp1.Contenedores

@inject BlazorApp1.Servicios.ServiciosTProyecto TipoProyectoService
<h5 class="mb-4 text-center">Lista de Tipos de Proyecto</h5>

<!-- Botones -->
<div class="mb-4">
    <button class="btn btn-success me-2" @onclick="AbrirModalCrear">
        <i class="bi bi-plus-lg"></i> Crear
    </button>
    <button class="btn btn-primary" @onclick="AbrirModalBuscar">
        <i class="bi bi-search"></i> Buscar
    </button>

    
    @if (!string.IsNullOrEmpty(filtroActivo))
    {
        <span class="badge bg-info text-dark ms-2">
            Filtrando: "@filtroActivo" 
            <button class="btn-close btn-close-white btn-sm ms-1" @onclick="LimpiarFiltro"></button>
        </span>
    }
</div>

<!-- Tabla -->
<div class="table-responsive">
    <table class="table table-striped table-hover table-bordered">
        <thead class="table-primary">
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Descripción</th>
                <th class="text-center">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @if (!TiposProyectoFiltrados.Any())
            {
                <tr>
                    <td colspan="4" class="text-center text-muted py-4">
                        @if (string.IsNullOrEmpty(filtroActivo))
                        {
                            <span>No hay tipos de proyecto registrados</span>
                        }
                        else
                        {
                            <span>No se encontraron resultados para "@filtroActivo"</span>
                        }
                    </td>
                </tr>
            }
            else
            {
                @foreach (var tp in TiposProyectoFiltrados) 
                {
                    <tr>
                        <td>@tp.Id</td>
                        <td>@tp.Nombre</td>
                        <td>@tp.Descripcion</td>
                        <td class="text-center">
                            <button class="btn btn-primary btn-sm me-1" @onclick="() => AbrirModalEditar(tp)">
                                <i class="bi bi-pencil"></i> Editar
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(tp)">
                                <i class="bi bi-trash"></i> Eliminar
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-info alert-dismissible fade show" role="alert">
        @mensaje
        <button type="button" class="btn-close" @onclick="() => VaciarMensaje()"></button>
    </div>
}


<!-- Modal de Búsqueda -->
<BusquedaModal 
    IsModalVisible="@IsModalBuscarVisible"
    Titulo="Buscar Tipos de Proyecto"
    Placeholder="Nombre o descripción..."
    MensajeInfo="Se buscarán coincidencias en nombre y descripción"
    TextoBusqueda="@textoBusqueda"
    TextoBusquedaChanged="@((value) => textoBusqueda = value)"
    OnBuscar="@AplicarBusqueda"
    OnCerrar="@CerrarModalBuscar" />

<!-- Modal de TipoProyecto -->
<TipoProyectoModal 
    Title="@titulo" 
    tipoProyecto="@TutipoProyecto"
    Metodo="@metodo"
    IsModalVisible="@IsModalVisible" />

@code {
    private List<Models.TipoProyecto> tiposProyecto = new();
    private Models.TipoProyecto TutipoProyecto = new();
    private string titulo = "";
    private Func<Task>? metodo;
    private bool IsModalVisible = false;
    private string mensaje = "";

    // Variables para búsqueda
    private bool IsModalBuscarVisible = false;
    private string textoBusqueda = "";
    private string filtroActivo = "";

    private IEnumerable<Models.TipoProyecto> TiposProyectoFiltrados
    {
        get
        {
            if (string.IsNullOrWhiteSpace(filtroActivo))
                return tiposProyecto;

            var filtro = filtroActivo.ToLower();
            return tiposProyecto.Where(tp =>
                (tp.Nombre?.ToLower().Contains(filtro) ?? false) ||
                (tp.Descripcion?.ToLower().Contains(filtro) ?? false)
            );
        }
    }

    protected override async Task OnInitializedAsync()
    {
        tiposProyecto = (await TipoProyectoService.GetTipoProyectos()).ToList();
    }

    private void VaciarMensaje()
    {
        mensaje = "";
    }

    // Métodos de búsqueda
    private void AbrirModalBuscar() => IsModalBuscarVisible = true;
    private void CerrarModalBuscar() => IsModalBuscarVisible = false;

    private void AplicarBusqueda()
    {
        filtroActivo = textoBusqueda;
        IsModalBuscarVisible = false;
    }

    private void LimpiarFiltro()
    {
        filtroActivo = "";
        textoBusqueda = "";
    }

    // Métodos CRUD
    private async Task AbrirModalCrear() => await OpenModal("Crear Tipo de Proyecto", null);
    private async Task AbrirModalEditar(Models.TipoProyecto tipo) => await OpenModal("Editar Tipo de Proyecto", tipo);

    private async Task OpenModal(string accion, Models.TipoProyecto? tipo)
    {
        if (accion == "Crear Tipo de Proyecto")
        {
            titulo = "Crear Tipo de Proyecto";
            TutipoProyecto = new Models.TipoProyecto();
            metodo = () => Crear();
        }
        else if (accion == "Editar Tipo de Proyecto" && tipo != null)
        {
            titulo = "Editar Tipo de Proyecto";
            TutipoProyecto = new Models.TipoProyecto
            {
                Id = tipo.Id,
                Nombre = tipo.Nombre,
                Descripcion = tipo.Descripcion
            };
            metodo = () => Actualizar();
        }

        IsModalVisible = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Crear()
    {
        var newResp = new CUTipoProyecto
        {
            Nombre = TutipoProyecto.Nombre,
            Descripcion = TutipoProyecto.Descripcion
        };

        var respuesta = await TipoProyectoService.PostTipoProyecto(newResp);
        if (respuesta != null)
        {
            mensaje = respuesta.Mensaje;
            if (respuesta.Estado == 200)
                tiposProyecto = (await TipoProyectoService.GetTipoProyectos()).ToList();
        }

        IsModalVisible = false;
    }

    private async Task Actualizar()
    {
        var tipoProyectoNEW = new CUTipoProyecto
        {
            Nombre = TutipoProyecto.Nombre,
            Descripcion = TutipoProyecto.Descripcion
        };

        var respuesta = await TipoProyectoService.PutTipoProyecto(tipoProyectoNEW, "Id", TutipoProyecto.Id);
        if (respuesta != null)
        {
            mensaje = respuesta.Mensaje;
            if (respuesta.Estado == 200)
                tiposProyecto = (await TipoProyectoService.GetTipoProyectos()).ToList();
        }

        IsModalVisible = false;
    }

    private async Task Eliminar(Models.TipoProyecto resp)
    {
        var respuesta = await TipoProyectoService.DeleteTipoProyecto("Id", resp.Id);
        if (respuesta != null)
        {
            mensaje = respuesta.Mensaje;
            if (respuesta.Estado == 200)
                tiposProyecto = (await TipoProyectoService.GetTipoProyectos()).ToList();
        }
    }
}

}