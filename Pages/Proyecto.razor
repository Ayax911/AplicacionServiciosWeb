@page "/proyectos"
@inject Servicios.ServiciosProyecto serviciosProyecto
@inject Servicios.ServiciosTProyecto serviciosTProyecto
@inject IJSRuntime JSRuntime

<h3 class="mb-2">Gestión de Proyectos</h3>
<p>Administra los proyectos de tu organización de manera eficiente</p>

@* ========================== DETALLE DEL PROYECTO ========================== *@
@if (MostrarDetalle)
{
    <div class="card">
        <div class="detalle-header d-flex align-items-center justify-content-between">
            <div class="d-flex align-items-center gap-3">
                <div class="avatar-circle-large">
                    @ObtenerIniciales(proyectoSeleccionado.Titulo)
                </div>
                <div>
                    <h5 class="mb-0 text-white fw-bold">@proyectoSeleccionado.Titulo</h5>
                    <p class="mb-0 text-white opacity-75">@proyectoSeleccionado.Codigo</p>
                </div>
            </div>
            <button class="btn btn-close-white" @onclick="() => MostrarDetalle = false">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>

        <div class="card-body">
            <div class="d-flex justify-content-center text-center gap-5 m-5">
                <div>
                    <label class="d-block mb-2">Código</label>
                    <strong>@proyectoSeleccionado.Codigo</strong>
                </div>
                <div>
                    <label class="d-block mb-2">Tipo de Proyecto</label>
                    <strong>@proyectoSeleccionado.TipoProyecto</strong>
                </div>
                <div>
                    <label class="d-block mb-2">Responsable</label>
                    <strong>@proyectoSeleccionado.Responsable</strong>
                </div>
                <div>
                    <label class="d-block mb-2">Proyecto Padre</label>
                    <strong>@proyectoSeleccionado.ProyectoPadre</strong>
                </div>
            </div>

            <div class="mb-4">
                <label class="detalle-label mb-3">Descripción del Proyecto</label>
                <div class="info-card">
                    <h6 class="fw-semibold mb-2">
                        <i class="bi bi-folder-fill"></i> @proyectoSeleccionado.Titulo
                    </h6>
                    <p class="mb-0">@proyectoSeleccionado.Descripcion</p>
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-md-6">
                    <label class="d-block mb-2 text-muted">Fecha Inicio</label>
                    <strong>@proyectoSeleccionado.FechaInicio?.ToString("dd/MM/yyyy")</strong>
                </div>
                <div class="col-md-6">
                    <label class="d-block mb-2 text-muted">Fecha Fin Prevista</label>
                    <strong>@proyectoSeleccionado.FechaFinPrevista?.ToString("dd/MM/yyyy")</strong>
                </div>
            </div>

            @if (proyectoSeleccionado.FechaFinalizacion != null)
            {
                <div class="mb-4">
                    <label class="d-block mb-2 text-muted">Fecha Finalización</label>
                    <strong>@proyectoSeleccionado.FechaFinalizacion?.ToString("dd/MM/yyyy")</strong>
                </div>
            }

            <div class="border-bottom mb-3"></div>

            <div class="d-flex justify-content-center gap-5">
                <button class="btn btn-primary" style="width: 500px" @onclick="() => EditarProyecto(proyectoSeleccionado)">
                    <i class="bi bi-pencil"></i> Editar
                </button>
                <button class="btn btn-danger" style="width: 200px" @onclick="() => EliminarProyecto(proyectoSeleccionado)">
                    <i class="bi bi-trash"></i> Eliminar
                </button>
            </div>
        </div>
    </div>
}
@* ========================== FORMULARIO ========================== *@
else if (MostrarFormulario)
{
    <div class="modal-overlay" @onclick="() => MostrarFormulario = false">
        <div class="form-card" @onclick:stopPropagation="true">
            <div class="form-header d-flex justify-content-between align-items-center">
                <div>
                    <h4 class="mb-1 fw-bold">@((proyectoEditando.Titulo != null) ? "Editar Proyecto" : "Nuevo Proyecto")</h4>
                    <p class="mb-0 text-muted">Complete la información del proyecto</p>
                </div>
                <button class="btn-close-icon" @onclick="() => MostrarFormulario = false">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>

            <div class="form-body">
                <div class="mb-4">
                    <label class="form-label-custom">Código <span class="text-danger">*</span></label>
                    <input type="text" class="form-control-custom" placeholder="Ej: PROJ-001" @bind="proyectoEditando.Codigo" />
                </div>

                <div class="mb-4">
                    <label class="form-label-custom">Título <span class="text-danger">*</span></label>
                    <input type="text" class="form-control-custom" placeholder="Ingrese el título" @bind="proyectoEditando.Titulo" />
                </div>

                <div class="mb-4">
                    <label class="form-label-custom">Descripción</label>
                    <textarea class="form-control-custom" rows="3" placeholder="Ingrese la descripción" @bind="proyectoEditando.Descripcion"></textarea>
                </div>
                
                <div class="mb-4">
                    <label class="form-label-custom">Tipo de Proyecto <span class="text-danger">*</span></label>
                    <select class="form-control-custom" @bind="proyectoEditando.TipoProyecto">
                        <option value="0">Seleccione un tipo</option>
                        @foreach (var tipo in tiposProyecto)
                        {
                            <option value="@tipo.Nombre">@tipo.Nombre</option>
                        }
                    </select>
                </div>
               
                <div class="mb-4">
                    <label class="form-label-custom">Responsable <span class="text-danger">*</span></label>
                    <select class="form-control-custom" @bind="proyectoEditando.IdResponsable">
                        <option value="0">Seleccione un responsable</option>
                        @foreach (var resp in responsables)
                        {
                            <option value="@resp.Id">@resp.Nombre</option>
                        }
                    </select>
                </div>
                
            <div class="mb-4">
                    <label class="form-label-custom">Proyecto Padre (Opcional)</label>
                    <select class="form-control-custom" @bind="proyectoEditando.IdProyectoPadre">
                        <option value="">Sin proyecto padre</option>
                        @foreach (var proyecto in proyectos.Where(p => p.Codigo != proyectoEditando.Codigo))
                        {
                            <option value="@proyecto.Id">@proyecto.Titulo</option>
                        }
                    </select>
                </div>

                <div class="row mb-4">
                    <div class="col-md-6">
                        <label class="form-label-custom">Fecha Inicio</label>
                        <input type="date" class="form-control-custom" @bind="proyectoEditando.FechaInicio" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label-custom">Fecha Fin Prevista</label>
                        <input type="date" class="form-control-custom" @bind="proyectoEditando.FechaFinPrevista" />
                    </div>
                </div>

                <div class="mb-4">
                    <label class="form-label-custom">Ruta Logo (URL)</label>
                    <input type="text" class="form-control-custom" placeholder="https://ejemplo.com/logo.png" @bind="proyectoEditando.RutaLogo" />
                </div>
            </div>

            <div class="form-footer d-flex justify-content-end gap-3">
                <button class="btn btn-primary btn-lg" @onclick="GuardarProyecto">
                    <i class="bi bi-check-lg me-2"></i> Guardar
                </button>
                <button class="btn btn-secondary btn-lg" @onclick="() => MostrarFormulario = false">
                    <i class="bi bi-x-lg me-2"></i> Cancelar
                </button>
            </div>
        </div>
    </div>
}
@* ========================== LISTADO ========================== *@
else
{
    <div class="mb-3">
        <div class="card">
            <div class="card-body">
                <div class="search-container">
                    <input type="text" class="search-input" placeholder="Buscar proyectos..." @bind="busqueda" @bind:event="oninput" />
                    <i class="bi bi-search search-icon"></i>
                </div>

                <div class="d-flex align-items-center mt-2 gap-3">
                    <button class="pill-filtros @GetPillClass("todos")" @onclick="ReiniciarFiltro">
                        Todos (@proyectos.Count)
                    </button>

                    @foreach (var tipo in tiposProyectoUnicos)
                    {
                        <button class="pill-filtros @GetPillClass(tipo)" @onclick="() => filterTipo = tipo">
                            @tipo (@GetCount(tipo))
                        </button>
                    }

                    <button class="btn btn-primary ms-auto" @onclick="NuevoProyecto">
                        <i class="bi bi-plus"></i> Agregar Proyecto
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body p-0">
            <table class="table table-custom table-hover">
                <thead class="table-header-custom">
                    <tr>
                        <th>Código</th>
                        <th>Título</th>
                        <th>Tipo</th>
                        <th>Responsable</th>
						<th>Estado</th>
                        <th>Fecha Inicio</th>
                        <th>Fecha Fin</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var proyecto in ProyectosFiltrados())
                    {
                        <tr>
                            <td><span class="badge bg-primary">@proyecto.Codigo</span></td>
                            <td>
                                <div class="d-flex align-items-center gap-3">
                                    <div class="avatar-circle">@ObtenerIniciales(proyecto.Titulo)</div>
                                    @proyecto.Titulo
                                </div>
                            </td>
                            <td>@proyecto.TipoProyecto</td>
                            <td>@proyecto.Responsable</td>
                            <td>@proyecto.Estado</td>
                            <td>@proyecto.FechaInicio?.ToString("dd/MM/yyyy")</td>
                            <td>@proyecto.FechaFinPrevista?.ToString("dd/MM/yyyy")</td>
                            <td>
                                <div class="d-flex gap-2">
                                    <button class="btn-action btn-action-view" title="Ver detalles" @onclick="() => DetallesSeleccionado(proyecto)">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    <button class="btn-action btn-action-edit" title="Editar" @onclick="() => EditarProyecto(proyecto)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn-action btn-action-delete" title="Eliminar" @onclick="() => EliminarProyecto(proyecto)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Mensaje))
    {
        <div class="alert alert-info mt-3" role="alert">@Mensaje</div>
    }
}

@code {
    private List<Models.DTOProyecto> proyectos = new();
    private IEnumerable<Models.TipoProyecto> tiposProyecto = new List<Models.TipoProyecto>();
    private List<Models.Responsable> responsables = new();
    private List<string> tiposProyectoUnicos = new();
    private Models.DTOProyecto proyectoSeleccionado = new();
    private Models.DTOProyecto? proyectoEditando;
    private bool MostrarDetalle = false;
    private bool MostrarFormulario = false;

    private string filterTipo = "todos";
    private string busqueda = string.Empty;
    private string Mensaje = string.Empty;

    protected override async Task OnInitializedAsync() => await CargarDatos();

    private async Task CargarDatos()
    {
        try
        {
            proyectos = await serviciosProyecto.ObtenerProyectosAsync();
            tiposProyecto = await serviciosTProyecto.GetTipoProyectos();
            responsables = await serviciosProyecto.ObtenerResponsablesAsync();
            ObtenerTiposUnicos();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar datos: {ex.Message}");
            Mensaje = "Error al cargar los datos.";
        }
    }

    private void ObtenerTiposUnicos()
    {
        tiposProyectoUnicos = proyectos
            .Where(p => !string.IsNullOrEmpty(p.TipoProyecto))
            .Select(p => p.TipoProyecto!)
            .Distinct()
            .ToList();
    }

    private List<Models.DTOProyecto> ProyectosFiltrados()
    {
        var resultado = proyectos.AsEnumerable();

        if (filterTipo != "todos")
            resultado = resultado.Where(p => p.TipoProyecto == filterTipo);

        if (!string.IsNullOrWhiteSpace(busqueda))
        {
            resultado = resultado.Where(p =>
                p.Titulo.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ||
                p.Codigo.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ||
                (p.Descripcion?.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ?? false)
            );
        }

        return resultado.ToList();
    }

    private string GetPillClass(string tipoId) => filterTipo == tipoId ? "pill-active" : "pill-default";
    private void ReiniciarFiltro() => filterTipo = "todos";
    private int GetCount(string tipo) => proyectos.Count(p => p.TipoProyecto == tipo);

    private void DetallesSeleccionado(Models.DTOProyecto proyecto)
    {
        proyectoSeleccionado = proyecto;
        MostrarDetalle = true;
    }

    private string ObtenerIniciales(string titulo)
    {
        if (string.IsNullOrWhiteSpace(titulo))
            return "??";

        var partes = titulo.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return partes.Length switch
        {
            1 => partes[0].Substring(0, Math.Min(2, partes[0].Length)).ToUpper(),
            _ => string.Concat(partes[0][0], partes[1][0]).ToUpper()
        };
    }

    private void NuevoProyecto()
    {
        proyectoEditando = new Models.DTOProyecto
        {
            FechaInicio = DateTime.Now,
            FechaFinPrevista = DateTime.Now.AddMonths(3)
        };
        MostrarFormulario = true;
    }

    private void EditarProyecto(Models.DTOProyecto proyecto)
    {
        proyectoEditando = proyecto;
        MostrarDetalle = false;
        MostrarFormulario = true;
    }

    private async Task GuardarProyecto()
    {
        try
        {
            int id = proyectoEditando?.Id ?? 0;
            int? idProyectoPadre = proyectoEditando?.IdProyectoPadre ?? null;
            int idResponsable = proyectoEditando?.IdResponsable ?? 0;
            string tipoProyecto = proyectoEditando?.TipoProyecto ?? string.Empty;
            string codigo = proyectoEditando?.Codigo ?? string.Empty;
            string titulo = proyectoEditando?.Titulo ?? string.Empty;
            string descripcion = proyectoEditando?.Descripcion ?? string.Empty;
            DateTime? fechaInicio = proyectoEditando?.FechaInicio ?? null;
            DateTime? fechaFinPrevista = proyectoEditando?.FechaFinPrevista ?? null;
            string rutaLogo = proyectoEditando?.RutaLogo ?? string.Empty;


            var rp = await serviciosProyecto.GuardarProyectoAsync(id, idProyectoPadre, idResponsable, tipoProyecto, codigo, titulo, descripcion, fechaInicio, fechaFinPrevista, rutaLogo); ;
            if (rp)
            {
                Mensaje = "Proyecto guardado correctamente.";
                MostrarFormulario = false;
                await CargarDatos();
				ObtenerTiposUnicos();
            }
        }
        catch (Exception ex)
        {
            Mensaje = $"Error: {ex.Message}";
        }
    }

    private async Task EliminarProyecto(Models.DTOProyecto proyecto)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"¿Está seguro de eliminar '{proyecto.Titulo}'?"))
        {
            try
            {
                 
                var resultado = await serviciosProyecto.EliminarProyectoAsync(proyecto.Id);
                Mensaje = resultado ? $"Error al eliminar.": "Proyecto eliminado correctamente.";
                if (resultado)
                {
                    MostrarDetalle = false;
                    await CargarDatos();
                }
            }
            catch (Exception ex)
            {
                Mensaje = $"Error: {ex.Message}";
            }
        }
    }
}


